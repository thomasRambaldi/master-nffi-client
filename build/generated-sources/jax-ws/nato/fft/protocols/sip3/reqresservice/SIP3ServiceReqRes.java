
package nato.fft.protocols.sip3.reqresservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * Simple SIP3 Request/Response Service. 
 * Initiated by subscriber.
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "SIP3_Service_ReqRes", targetNamespace = "urn:nato:fft:protocols:sip3:reqresservice", wsdlLocation = "http://localhost:8080/SIP3Master/SIP3_Service_ReqRes?wsdl")
public class SIP3ServiceReqRes
    extends Service
{

    private final static URL SIP3SERVICEREQRES_WSDL_LOCATION;
    private final static WebServiceException SIP3SERVICEREQRES_EXCEPTION;
    private final static QName SIP3SERVICEREQRES_QNAME = new QName("urn:nato:fft:protocols:sip3:reqresservice", "SIP3_Service_ReqRes");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://localhost:8080/SIP3Master/SIP3_Service_ReqRes?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        SIP3SERVICEREQRES_WSDL_LOCATION = url;
        SIP3SERVICEREQRES_EXCEPTION = e;
    }

    public SIP3ServiceReqRes() {
        super(__getWsdlLocation(), SIP3SERVICEREQRES_QNAME);
    }

    public SIP3ServiceReqRes(WebServiceFeature... features) {
        super(__getWsdlLocation(), SIP3SERVICEREQRES_QNAME, features);
    }

    public SIP3ServiceReqRes(URL wsdlLocation) {
        super(wsdlLocation, SIP3SERVICEREQRES_QNAME);
    }

    public SIP3ServiceReqRes(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SIP3SERVICEREQRES_QNAME, features);
    }

    public SIP3ServiceReqRes(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SIP3ServiceReqRes(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns SIP3PortReqRes
     */
    @WebEndpoint(name = "SIP3_ServicePort_ReqRes")
    public SIP3PortReqRes getSIP3ServicePortReqRes() {
        return super.getPort(new QName("urn:nato:fft:protocols:sip3:reqresservice", "SIP3_ServicePort_ReqRes"), SIP3PortReqRes.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SIP3PortReqRes
     */
    @WebEndpoint(name = "SIP3_ServicePort_ReqRes")
    public SIP3PortReqRes getSIP3ServicePortReqRes(WebServiceFeature... features) {
        return super.getPort(new QName("urn:nato:fft:protocols:sip3:reqresservice", "SIP3_ServicePort_ReqRes"), SIP3PortReqRes.class, features);
    }

    /**
     * 
     * @return
     *     returns SIP3PortDecReqRes
     */
    @WebEndpoint(name = "SIP3_ServicePort_DecReqRes")
    public SIP3PortDecReqRes getSIP3ServicePortDecReqRes() {
        return super.getPort(new QName("urn:nato:fft:protocols:sip3:reqresservice", "SIP3_ServicePort_DecReqRes"), SIP3PortDecReqRes.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SIP3PortDecReqRes
     */
    @WebEndpoint(name = "SIP3_ServicePort_DecReqRes")
    public SIP3PortDecReqRes getSIP3ServicePortDecReqRes(WebServiceFeature... features) {
        return super.getPort(new QName("urn:nato:fft:protocols:sip3:reqresservice", "SIP3_ServicePort_DecReqRes"), SIP3PortDecReqRes.class, features);
    }

    private static URL __getWsdlLocation() {
        if (SIP3SERVICEREQRES_EXCEPTION!= null) {
            throw SIP3SERVICEREQRES_EXCEPTION;
        }
        return SIP3SERVICEREQRES_WSDL_LOCATION;
    }

}
